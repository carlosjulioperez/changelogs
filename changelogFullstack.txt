NodeJS
	* Mac :
		+ MongoDB (catalina):
			$ brew tap mongodb/brew
			$ brew install mongodb-community@4.4
			
			To restart mongodb/brew/mongodb-community@4.4 after an upgrade:
  			$ brew services restart mongodb/brew/mongodb-community@4.4
			
			$ brew services start mongodb/brew/mongodb-community@4.4
				==> Successfully started `mongodb-community@4.4` (label: homebrew.mxcl.mongodb-c
			$ brew services stop mongodb/brew/mongodb-community@4.4
			
		+ NodeJS express MongoDB:
			$ mkdir crm
			$ cd crm
			$ npm init
			$ npm i express
			$ npm i mongoose

		+ NodeJS express PostgreSQL:
			$ npm install express pg dotenv nodemon 
			$ npm install cors
			$ touch .env
				DB_USER=legacy
				DB_HOST=localhost
				DB_DATABASE=EF_Legacy
				DB_PASSWORD=legacy.2024
				DB_PORT=5432
			
			$ touch server.js
				const express = require('express');
				const pool = require('./config/database');
				require('dotenv').config();

				const app = express();
				const port = process.env.PORT || 3000;

				app.get('/', async (req, res) => {
				  try {
					const client = await pool.connect();
					const result = await client.query('SELECT NOW()');
					res.send(result.rows[0]);
					client.release();
				  } catch (err) {
					console.error(err);
					res.send('Error ' + err);
				  }
				});

				app.listen(port, () => {
				  console.log(`Server is running on port ${port}`);
				});

			$ mkdir config
			$ touch config/database.js
				const { Pool } = require('pg');
				require('dotenv').config();
				
				const pool = new Pool({
				  user: process.env.DB_USER,
				  host: process.env.DB_HOST,
				  database: process.env.DB_DATABASE,
				  password: process.env.DB_PASSWORD,
				  port: process.env.DB_PORT,
				  max: 5,
				  min: 0,
				  acquire: 30000,
				  idle: 10000
				});
				
				module.exports = pool;

			Configure Hot Reload (update package.json)
				{
				  "name": "node-express-postgres",
				  "version": "1.0.0",
				  "main": "server.js",
				  "scripts": {
					"start": "node server.js",
					"dev": "nodemon server.js"
				  },
				  "dependencies": {
					"dotenv": "^16.0.3",
					"express": "^4.18.2",
					"pg": "^8.7.1"
				  },
				  "devDependencies": {
					"nodemon": "^2.0.20"
				  }
				}

			Run
			$ npm run dev
			$ npm run start

		+ Transversal:
			Babel: To compile the latest JavaScript version for the browser to read
			$ npm i --save-dev @babel/core @babel/cli @babel/node @babel/preset-env
			$ npm i nodemon body-parser
			$ npm start

	* Angular CLI:
		https://angular.io/cli

		$ npm install -g @angular/cli

			npm WARN deprecated request@2.88.2: request has been deprecated, see https://github.com/request/request/issues/3142
			npm WARN deprecated har-validator@5.1.5: this library is no longer supported
			/home/carper/local/fullstack/node-v14.16.1-linux-x64/bin/ng -> /home/carper/local/fullstack/node-v14.16.1-linux-x64/lib/node_modules/@angular/cli/bin/ng

			> @angular/cli@11.2.9 postinstall /home/carper/local/fullstack/node-v14.16.1-linux-x64/lib/node_modules/@angular/cli
			> node ./bin/postinstall/script.js

			? Would you like to share anonymous usage data with the Angular Team at Google under
			Google’s Privacy Policy at https://policies.google.com/privacy? For more details and
			how to change this setting, see https://angular.io/analytics. No
			+ @angular/cli@11.2.9:
			added 242 packages from 181 contributors in 72.188s
		
		$ ng new my-first-project
		$ cd my-first-project
		$ ng serve

		http://localhost:4200/

		$ ng generate service employee --skip-tests=true

	* SpringBoot:
		https://start.spring.io/

	* MX Linux 19.4:
		https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-debian-10

		$ sudo apt install nodejs npm
		$ node -v
		v10.24.0

		Descargar la última versión y agregar al PATH
		$ vim ~/.bashrc
		export PATH=$PATH:/home/carper/local/fullstack/node-v14.16.1-linux-x64/bin
		$ source ~/.bashrc
