Snowflake

	Snowsight: Snowflake Web interface
	SQL Worksheets: Run SQL, query executes and query details
	Notebooks: Run both SQL and Python code, task and maintain data pipelines
	Connecting with Snowflake: Drivers ODBC (Open Database Connectivity), JDBC, Connectors: Python, Spqrk, etc
	Connecting with Snowflake: Snowflake CLI
	SQL Flavors: Snowflake SQL, SQL Flavor: PostgreSQL, T-SQL, MySQL

	Common syntax
		SELECT
		FROM
		WHERE
		GROUPBY
		ORDER BY
		AVG() , COUNT() , SUM() (etc) DISTINCT
		HAVING
		JOIN *	

	SELECT product, amount FROM SALES_TRANSACTIONS GROUP BY product, amount ORDER BY amount DESC;

	SELECT
	  sum(amount)
	FROM
	  "COURSE_39090_DB_509B3317D6DC4FD9852F230E40A6C2BE"."STUDENT_STORE"."SALES_TRANSACTIONS"
	
	-- Count all pizza entries
	SELECT count(*) AS count_all_pizzas
	FROM pizza_type

	-- Get information about the orders table
	DESC TABLE orders

	SELECT price, 
	-- Convert price to NUMBER data type
	CAST(price AS NUMBER) AS price_dollars
	FROM pizzas

	SELECT EXTRACT(MONTH FROM order_date) AS order_month,
		COUNT(*) AS num_orders
	FROM orders
		GROUP BY order_month

	SELECT CAST(order_timestamp AS DATE)
	AS order_date
	FROM orders

	SORTING: ORDER BY
	GROUPING: GROUP BY 
	Snowflake: GROUP BY ALL

	-- Combine the name and category columns
	SELECT CONCAT(name, ' - ', category) AS name_and_category
	FROM pizza_type

	-- Select the current date, current time
	SELECT CURRENT_DATE, CURRENT_TIME

	-- Count the number of orders per day
	SELECT COUNT(*) AS orders_per_day, 
	-- Extract the day of the week and alias to order_day
		EXTRACT(WEEKDAY FROM order_date) AS order_day
	FROM orders
	GROUP BY order_day
	ORDER BY orders_per_day DESC

	-- Get the month from order_date
	SELECT EXTRACT(month FROM order_date) AS order_month, 
		p.pizza_size,
		-- Calaculate revenue
		SUM(p.price * od.quantity) AS revenue
	FROM orders o
	INNER JOIN order_details od USING(order_id)
	INNER JOIN pizzas p USING(pizza_id)
	-- Appropriately group the query
	GROUP BY ALL
	-- Sort by revenue in descending order
	ORDER BY revenue DESC;

	--------------------------------------------------
	SQL JOIN
	========
		SELECT *
		 FROM pizzas AS p
		 JOIN  pizza_type AS t
			 ON t.pizza_type_id = p.pizza_type_id

		SELECT COUNT(o.order_id) AS total_orders,
				AVG(p.price) AS average_price,
				-- Calculate total revenue
				SUM(p.price * od.quantity) AS total_revenue	
		FROM orders AS o
		LEFT JOIN order_details AS od
		ON o.order_id = od.order_id
		-- Use an appropriate JOIN with the pizzas table
		LEFT JOIN pizzas AS p
		ON od.pizza_id = p.pizza_id

		TOTAL_ORDERS	AVERAGE_PRICE		TOTAL_REVENUE
		48620			16.494132044426163	817860.05
	
	INNER JOIN
	==========
	An inner join between two tables will return only records where a joining field, such as a key, finds a match in both tables.
		INNER JOIN join [ON] one field
		----------------------------
		SELECT *
		FROM artist AS art
		INNER JOIN album AS alb
		ON art.artist_id = alb.artist_id;

		INNER JOIN with [USING]
		-----------------------
		SELECT *
		FROM artist AS art
		INNER JOIN album AS alb
		USING (artist_id);

	LEFT JOIN
	=========
	A left join keeps all of the original records in the left table and returns missing values for any columns from the right table where the joining field did not find a match.
	
		LEFT JOIN on one field
		----------------------
		SELECT *
		FROM artist AS art
		LEFT JOIN album AS alb
		ON art.artist_id = alb.artist_id;

	RIGHT JOIN
	==========
	A right join keeps all of the original records in the right table and returns missing values for any columns from the left table where the joining field did not find a match. Right joins are far less common than left joins, because right joins can always be re- written as left joins.

	RIGHT JOIN on one field
	-----------------------
		SELECT *
		FROM artist as art
		RIGHT JOIN album AS alb
		ON art.artist_id = alb.artist_id;

		SELECT COUNT(o.order_id) AS total_orders,
				AVG(p.price) AS average_price,
				-- Calculate total revenue
				SUM(p.price * od.quantity) AS total_revenue,
				-- Get the name from the pizza_type table
				name AS pizza_name
		FROM orders AS o
		LEFT JOIN order_details AS od
		ON o.order_id = od.order_id
		-- Use an appropriate JOIN with the pizzas table
		RIGHT JOIN pizzas p
		ON od.pizza_id = p.pizza_id
		-- NATURAL JOIN the pizza_type table
		NATURAL JOIN pizza_type AS pt
		GROUP BY pt.name, pt.category
		ORDER BY total_revenue desc, total_orders desc

	NATURAL JOIN automatically match columns and eliminate duplicated ones
	======================================================================
		SELECT *
		 FROM pizzas AS p
		 NATURAL JOIN pizza_type AS t

		SELECT
			-- Get the pizza category
			pt.category,
			SUM(p.price * od.quantity) AS total_revenue
		FROM order_details AS od
			NATURAL JOIN pizzas AS p
			-- NATURAL JOIN the pizza_type table
			NATURAL JOIN pizza_type AS pt
			-- GROUP the records by category
		GROUP BY ALL
		-- ORDER by total_revenue and limit the records
		ORDER BY total_revenue DESC
		LIMIT 1
		
		CATEGORY	TOTAL_REVENUE
		Classic		220053.1

	LATERAL JOIN : lets a subquery in FROM reference columns from preceding tables or views.
	========================================================================================
		SELECT
			 *
		 FROM orders AS o,
		 LATERAL (
			-- Subquery calculating total_spent
			 SELECT
				 SUM(p.price * od.quantity) AS total_spent
			 FROM order_details AS od
			 JOIN pizzas AS p
				   ON od.pizza_id = p.pizza_id
			 WHERE o.order_id = od.order_id
		 ) AS t
		 ORDER BY o.order_id
		 
	Common Table Expressions
	========================
	CTEs are like giving a nickname to a query so we can easily use it in a
	query.

		SELECT pt.name,
			pt.category,
			SUM(od.quantity) AS total_orders
		FROM pizza_type pt
		JOIN pizzas p
			ON pt.pizza_type_id = p.pizza_type_id
		JOIN order_details od
			ON p.pizza_id = od.pizza_id
		GROUP BY ALL
		HAVING SUM(od.quantity) < (
		  -- Calculate AVG of total_quantity
		  SELECT AVG(total_quantity)
		  FROM (
			-- Calculate total_quantity
			SELECT SUM(od.quantity) AS total_quantity
			FROM pizzas p
			JOIN order_details od 
				ON p.pizza_id = od.pizza_id
			GROUP BY p.pizza_id
			-- Alias as subquery
		  ) AS subquery
		)

		NAME					CATEGORY	TOTAL_ORDERS
		The Brie Carre Pizza	Supreme		490

		-- Create a CTE named most_ordered and limit the results 
		WITH most_ordered AS (
			SELECT pizza_id, SUM(quantity) AS total_qty 
			FROM order_details GROUP BY pizza_id ORDER BY total_qty DESC
			LIMIT 1
		)
		-- Create CTE cheapest_pizza where price is equal to min price from pizzas table
		, cheapest_pizza AS (
			SELECT pizza_id, price
			FROM pizzas 
			WHERE price = (SELECT MIN(price) FROM pizzas)
			LIMIT 1
		)

		SELECT pizza_id, 'Most Ordered' AS Description, total_qty AS metric
		-- Select from the most_ordered CTE
		FROM most_ordered
		UNION ALL
		SELECT pizza_id, 'Cheapest' AS Description, price AS metric
		-- Select from the cheapest_pizza CTE
		FROM cheapest_pizza

		PIZZA_ID	DESCRIPTION		METRIC
		big_meat_s	Most Ordered	1914
		pepperoni_s	Cheapest		9.75


		WITH filtered_orders AS (
		  SELECT order_id, order_date 
		  FROM orders 
			-- Filter records where order_date is greater than November 1, 2015
		  WHERE order_date > '2015-11-01'
		)

		, filtered_pizza_type AS (
		  SELECT name, pizza_type_id 
		  FROM pizza_type 
		  -- Filter the pizzas which are in the Veggie category
		  WHERE category = 'Veggie'
		)

		SELECT fo.order_id, fo.order_date, fpt.name, od.quantity
		-- Get the details from filtered_orders CTE
		FROM filtered_orders AS fo
		JOIN order_details AS od ON fo.order_id = od.order_id
		JOIN pizzas AS p ON od.pizza_id = p.pizza_id
		-- JOIN the filtered_pizza_type CTE on pizza_type_id
		JOIN filtered_pizza_type AS fpt ON p.pizza_type_id = fpt.pizza_type_id

		ORDER_ID	ORDER_DATE	NAME								QUANTITY
		17934		2015-11-02	The Vegetables + Vegetables Pizza	1
		17940		2015-11-02	The Green Garden Pizza				1
		17940		2015-11-02	The Mexicana Pizza					1

		==================================================
		SELECT name,
			review_count,
			-- Retrieve the Saturday hours
			hours:Saturday,
			-- Retrieve the Sunday hours
			hours:Sunday
		FROM yelp_business_data
		-- Filter for Restaurants
		WHERE categories LIKE '%Restaurant%'
			AND (hours:Saturday IS NOT NULL AND hours:Sunday IS NOT NULL)
			AND city = 'Philadelphia'
			AND stars = 5
		ORDER BY review_count DESC

		NAME					REVIEW_COUNT	HOURS:SATURDAY	HOURS:SUNDAY
		Tortilleria San Roman	219				"9:0-17:0"		"9:0-17:0"
		Hikari Sushi			155				"16:30-23:0"	"16:0-21:30"
		Bad Brother				92				"17:0-2:0"		"17:0-0:0"

		SELECT business_id, name
		FROM yelp_business_data
		WHERE categories ILIKE '%Restaurant%'
			-- Filter where DogsAllowed is '%True%'
			AND attributes:DogsAllowed ILIKE '%True%'
			-- Filter where BusinessAcceptsCreditCards
			AND attributes:BusinessAcceptsCreditCards ILIKE '%True%'
			AND city ILIKE '%Philadelphia%'
			90
			AND stars = 5
==================================================

	new Python Worksheets / Snowpark
	Data Products / Market Place [Applications, Connectors]

	New Virtual warehouse

	New Notebook (projects for analysis)
	New Markdown Cell

	+ Storage layer:
		Cloud-based: AWS, GCP, and Microsoft Azure.
		Stores data in a Columnar format
		Micro-partitioning to stores tables in memory in small chunks for query optimization
		Zero-copy cloning to create virtual clones of data
		Scale and elasticity 

