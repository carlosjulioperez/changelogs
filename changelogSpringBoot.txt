Spring Boot

	+ terms:
		jpa annotation exception spring boot controller adwise
		
		In Spring Boot applications, @ControllerAdvice is a powerful annotation used for global exception handling and other cross-cutting concerns that apply to multiple controllers. When dealing with JPA (Java Persistence API) and potential exceptions arising from database interactions, @ControllerAdvice can be effectively combined with @ExceptionHandler to provide centralized and consistent error responses.

		Entornos: dev, qa, prod
		Lombok
		AWS fullstack
		Vue

	+ JPA:
		In Springboot 3 javax.persistence was replaced by [jakarta.persistence]
		https://genotechies.medium.com/not-found-javax-persistence-in-my-spring-boot-project-b52939614066
	
	+ thymeleaf para spring 3:
		https://stackoverflow.com/questions/75635260/thymeleaf-not-loading-html-pages-except-index-html-spring-boot-3-0-2

		<parent>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-parent</artifactId>
			<version>3.0.4</version>
			<relativePath/> <!-- lookup parent from repository -->
		</parent>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>

	+ Conceptos:
		https://www.baeldung.com/jpa-join-column
		https://www.baeldung.com/spring-data-rest-relationships
		https://www.oscarblancarteblog.com/2018/11/30/data-transfer-object-dto-patron-diseno/
		https://github.com/javaquery/spring-boot-examples/blob/master/src/main/java/com/javaquery/examples/springboot/rest/exception/EntityNotFoundException.java

            throw new EntityNotFoundException(Topic.class, topicId);
            //  throw new EntityNotFoundException("Topic.class, topicId");

		% sh mvnw clean install
		% sh mvnw spring-boot:run
		% sh mvnw test
 
		% source ~/.bash_profile
		% mvn clean install
		% mvn spring-boot:run

		Registro en la base de datos H2 v√≠a consola web:
		http://localhost:8081/h2-console

	+ Spring Boot CLI:
		https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started.html#getting-started-installing-the-cli

		$ curl -s get.sdkman.io | bash
		$ source "$HOME/.sdkman/bin/sdkman-init.sh"
		
		$ sdk install gradle
		$ sdk install springboot

		$ spring --version
		Spring CLI v2.4.3

	+ Crear proyecto:

		* Crear cada proyecto desde consola:
			$ cd microservices/product-composite-service; ./gradlew build; cd -; \
			cd microservices/product-service;           ./gradlew build; cd -; \
			cd microservices/recommendation-service;    ./gradlew build; cd -; \
			cd microservices/review-service;            ./gradlew build; cd -;

		* Configurando multi-proyectos en Gradle:
			$ cat <<EOF > settings.gradle
			include ':microservices:product-service'
			include ':microservices:price-service'
			include ':microservices:product-composite-service'
			EOF	

			$ cat <<EOF > settings.gradle
			include ':microservices:product-service'
			include ':microservices:review-service'
			include ':microservices:recommendation-service'
			include ':microservices:product-composite-service'
			EOF	

			$ cp -r microservices/product-service/gradle .
			$ cp microservices/product-service/gradlew .
			$ cp microservices/product-service/gradlew.bat .
			$ cp microservices/product-service/.gitignore .

			$ find microservices -depth -name "gradle" -exec rm -rfv "{}" \;
			$ find microservices -depth -name "gradlew*" -exec rm -fv "{}" \;

			$ ./gradlew build
			$ java -jar microservices/product-service/build/libs/*.jar &

		* Para proyectos libs o api, sin mainClass:
			https://stackoverflow.com/questions/56861256/gradle-build-failed-main-class-name-has-not-been-configured-and-it-could-not-be

		* En el gradle.settings indicar todos los proyectos a usar:
			https://stackoverflow.com/questions/23640059/project-with-path-mypath-could-not-be-found-in-root-project-myproject

