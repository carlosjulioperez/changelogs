SQL	
	* Buscar un valor en todos los campos de una bd:
		https://stackoverflow.com/questions/5350088/how-to-search-a-specific-value-in-all-tables-postgresql

		$ pg_dump --data-only --inserts -U postgres your-db-name > a.tmp
		$ grep United a.tmp
		INSERT INTO countries VALUES ('US', 'United States');
		INSERT INTO countries VALUES ('GB', 'United Kingdom');

		$ pg_dump --data-only --insert -U postgres busicentury19 > busicentury19-20190517.sql
		$ ack diana.echeverria busicentury19-20190517.sql


		carper@cjbox-dev:~/tmp$ ack diana.echeverria busicentury19-20190517.sql
		INSERT INTO contact VALUES (11, 11, '', '', '', '', '', '', '', '', 'diana.echeverria@tonicorp.com', 'M', NULL, 'company');
		INSERT INTO vendor VALUES (11, 'PLASTICOS ECUATORIANOS S.A.', ' ', '', '', 'diana.echeverria@tonicorp.com', 'Henry Decker', 0, false, 'PEC0990013497', 'rrugel@tonicor.com', '', '0990013497001', 0, '', '', 0, 0, '', '', 0, '', 0, '   ', '2019-01-01', NULL, 191, 5, NULL, 0, 0, 0, 0, false, 1, '', '', '', '');


		busicentury19=# \d contact;
												  Tabla «public.contact»
			Columna    |         Tipo          |                           Modificadores                            
		---------------+-----------------------+--------------------------------------------------------------------
		 id            | integer               | not null valor por omisión nextval(('contactid'::text)::regclass)
		 trans_id      | integer               | not null
		 salutation    | character varying(32) | 
		 firstname     | character varying(32) | 
		 lastname      | character varying(32) | 
		 contacttitle  | character varying(32) | 
		 occupation    | character varying(32) | 
		 phone         | character varying(20) | 
		 fax           | character varying(20) | 
		 mobile        | character varying(20) | 
		 email         | text                  | 
		 gender        | character(1)          | valor por omisión 'M'::bpchar
		 parent_id     | integer               | 
		 typeofcontact | character varying(20) | 
		Índices:
			"contact_pkey" PRIMARY KEY, btree (id)

		¿Relación entre vendor y contact?
		¿Relación entre customer y contact?


	* Duplicar tablas:
		https://popsql.com/learn-sql/postgresql/how-to-duplicate-a-table-in-postgresql/

		create table dupe_users as (select * from users);

		-- The `with no data` here means structure only, no actual rows
		create table dupe_users as (select * from users) with no data;

		create table chart_copy as (select * from chart) with no data;

	* Actualizar campos de una tabla por medio de otra:
		COPY chart TO '/tmp/chart.csv' WITH DELIMITER ',' CSV HEADER;
		CREATE TABLE chart_copy AS (SELECT * FROM chart) WITH NO DATA;
		COPY chart_copy FROM '/tmp/chart.csv' DELIMITER  ',' CSV HEADER;
		
		https://stackoverflow.com/questions/6256610/updating-table-rows-in-postgres-using-subquery

			UPDATE 	chart
			SET 	link=chart_copy.link 
			FROM 	(SELECT * FROM chart_copy) AS chart_copy
			WHERE 	chart.accno=chart_copy.accno 
			AND		chart.link IS NULL;	

	* Actualizar campo uselots:
		update parts set uselots = 'Y';

	* Mostrar registros con ID duplicados:
		https://stackoverflow.com/questions/28156795/how-to-find-duplicate-records-in-postgresql

		select * from ar a where (select count(*) from ar b where b.id = a.id) > 1;
		select * from customer a where (select count(*) from customer b where b.id = a.id) > 1;
		select * from customer a where (select count(*) from customer b where b.customernumber = a.customernumber) > 1;
		
		select * from customer where email like 'damiana90@hotmail.com';
		set client_encoding ='LATIN1';
		select id, name, email, customernumber, taxnumber from customer where email like 'damiana90@hotmail.com';
		update customer set id=1100000 where id=11;

		select * from ap a where (select count(*) from ap b where b.id = a.id) > 1;
		select * from vendor a where (select count(*) from vendor b where b.id = a.id) > 1;
		
		select * from chart a where (select count(*) from chart b where b.id = a.id) > 1;
		select * from parts a where (select count(*) from parts b where b.id = a.id) > 1;

		Crear como nuevo, buscar el reg. anterior y borrarlo en una empresa de prueba. Luego sacar el reporte para ver si hay error.

	* Terminar conexiones:
		https://stackoverflow.com/questions/5108876/kill-a-postgresql-session-connection

		SELECT pg_terminate_backend(procpid) 
		FROM pg_stat_activity 
		WHERE -- don't kill my own connection!
			procpid <> pg_backend_pid()
			-- don't kill the connections to other databases
			AND datname = 'database_name' ;

	* Determinar el tamaño de la BD:
		https://stackoverflow.com/questions/18907047/postgres-db-size-command
		\l+

	* Cambiar propietario de tablas usando psql:
		https://stackoverflow.com/questions/12445608/psql-list-all-tables
		https://stackoverflow.com/questions/1348126/modify-owner-on-all-tables-simultaneously-in-postgresql

		https://gist.githubusercontent.com/gingerlime/2482969/raw/08e68527f737cb4ada8352bffa9a687d34d163f6/change_db_owner.sh

		\dt

	* Codificación de caracteres:
		apracomsa=# select * from ar;
		ERROR:  invalid byte sequence for encoding "UTF8": 0xf1 0x69 0x67 0x61
		
		apracomsa=# set client_encoding ='LATIN1';
		SET

		+ En JDBC:
			jdbc:postgresql://localhost/busicentury19?allowEncodingChanges=true
			En SQuirreL por ejemplo, ingresar:
				set client_encoding ='LATIN1';
				sentencia sql

	* Impedir conexiones en BD:
		https://stackoverflow.com/questions/3185266/postgresql-temporarily-disable-connections
		update pg_database set datallowconn = false where datname = 'prueba';

	* Backup y restore:
		pg_dump dbname > outfile
		psql dbname < infile

		pg_dump --data-only --table=parts logistica > parts.sql
		psql logistica < parts.sql
		
		pg_dump --data-only --table=chart atver2019 > chart.sql

		+ Solo esquema:
		pg_dump -s databasename > file.dump
	
	* Comparar bases de datos:
		https://stackoverflow.com/questions/4804779/how-to-check-difference-between-two-databases-in-postgresql
		apgdiff.com
		
		$ java -jar apgdiff-2.4.jar

		$ pg_dump apracomsa > apracomsa.sql
		$ pg_dump demo123 > demo123.sql
		$ apgdiff apracomsa.sql demo123.sql > diff.sql

	* Renombrar una BD:
		alter database "old"   rename to "new";
		alter database "aguas" rename to "zx2018";
	
	* Crear una bd para SL:
		Crear la bd
		Ingresar admin para crear la estructura
		Ejecut7ar el script SL-FE-diff.sql para agregar las columnas faltantes.

	* Ejemplos de ejecución de scripts:

		$ createdb -E UTF8 -T template1 hpm

		# psql -U sql-ledger -d apracomsa -a -f /home/cromero/fe/insert.sql
		# psql -U sql-ledger -d apracomsa -a -f ~/local/projects/cjerp/cjfe/src/main/resources/sql/fe_config.sql 

		# psql -U sql-ledger -d prueba -a -f SL-FE-diff.sql
		# psql -U sql-ledger -d hpm -a -f SL-FE-diff.sql
		# psql -U sql-ledger -d him -a -f SL-FE-diff.sql
		# psql -U sql-ledger -d logistica -a -f SL-FE-diff.sql
		
		\i path_to_sql_file @pathof_mysqlfile.sql
		apracomsa=# \i /usr/local/fe/ddl.sql
		apracomsa=# \i /usr/local/fe/insert.sql
		apracomsa=# \i /usr/local/fe/update.sql

	* Importar y exportar:

		+ Exportar solo datos:
		COPY ( SELECT * FROM customer ORDER BY name )        TO '/tmp/customer.csv' With CSV DELIMITER ',';
		COPY ( SELECT * FROM vendor   ORDER BY name )        TO '/tmp/vendor.csv'   With CSV DELIMITER ',';
		COPY ( SELECT * FROM parts    ORDER BY description ) TO '/tmp/parts.csv'    With CSV DELIMITER ',';
		COPY ( SELECT * FROM chart    order by accno )       TO '/tmp/chart.csv'    With CSV DELIMITER ',';
		
		+ Exportar con cabecera:
		COPY fe_config   TO '/tmp/fe_config.csv'   WITH DELIMITER ',' CSV HEADER;
		COPY customer    TO '/tmp/customer.csv'    WITH DELIMITER ',' CSV HEADER;
		COPY vendor      TO '/tmp/vendor.csv'      WITH DELIMITER ',' CSV HEADER;
		COPY address     TO '/tmp/address.csv'     WITH DELIMITER ',' CSV HEADER;
		COPY parts       TO '/tmp/parts.csv'       WITH DELIMITER ',' CSV HEADER;
		COPY chart       TO '/tmp/chart.csv'       WITH DELIMITER ',' CSV HEADER;
		COPY tax         TO '/tmp/tax.csv'         WITH DELIMITER ',' CSV HEADER;
		COPY defaults    TO '/tmp/defaults.csv'    WITH DELIMITER ',' CSV HEADER;
		COPY tipodoc     TO '/tmp/tipodoc.csv'     WITH DELIMITER ',' CSV HEADER;
		COPY tipoid      TO '/tmp/tipoid.csv'      WITH DELIMITER ',' CSV HEADER;
		COPY tiporet     TO '/tmp/tiporet.csv'     WITH DELIMITER ',' CSV HEADER;
		COPY partstax    TO '/tmp/partstax.csv'    WITH DELIMITER ',' CSV HEADER;
		COPY customertax TO '/tmp/customertax.csv' WITH DELIMITER ',' CSV HEADER;
		COPY vendortax   TO '/tmp/vendortax.csv'   WITH DELIMITER ',' CSV HEADER;

		+ Importar:
		http://www.postgresqltutorial.com/import-csv-file-into-posgresql-table/

		COPY fe_config   FROM '/tmp/fe_config.csv'   DELIMITER  ',' CSV HEADER;
		COPY customer    FROM '/tmp/customer.csv'    DELIMITER  ',' CSV HEADER;
		COPY vendor      FROM '/tmp/vendor.csv'      DELIMITER  ',' CSV HEADER;
		COPY address     FROM '/tmp/address.csv'     DELIMITER  ',' CSV HEADER;
		COPY parts       FROM '/tmp/parts.csv'       DELIMITER  ',' CSV HEADER;
		COPY tipoid      FROM '/tmp/tipoid.csv'      DELIMITER  ',' CSV HEADER;
		COPY tipodoc     FROM '/tmp/tipodoc.csv'     DELIMITER  ',' CSV HEADER;
		COPY tiporet     FROM '/tmp/tiporet.csv'     DELIMITER  ',' CSV HEADER;
		
		COPY chart       FROM '/tmp/chart.csv'       DELIMITER  ',' CSV HEADER;
		COPY defaults    FROM '/tmp/defaults.csv'    DELIMITER  ',' CSV HEADER;
		COPY tax         FROM '/tmp/tax.csv'         DELIMITER  ',' CSV HEADER;

		--2019-01-04
		COPY partstax    FROM '/tmp/partstax.csv'    DELIMITER  ',' CSV HEADER;
		COPY customertax FROM '/tmp/customertax.csv' DELIMITER  ',' CSV HEADER;
		COPY vendortax   FROM '/tmp/vendortax.csv'   DELIMITER  ',' CSV HEADER;

	* Cuentas para productos:
		SELECT * FROM chart WHERE accno IN ('1010703021','4010101002','5010101001');
		68  | 1010703021 | INVENTARIO DE PRODUCTOS TERMINADOS
		333 | 4010101002 | VENTAS LOCALES BIENES 0%          
		393 | 5010101001 | COSTO DE PRODUCTOS VENDIDOS       

	* Rastro de detalle de facturas:

		select * from inventory where parts_id = 17141 and shippingdate = '10-17-2018';
		select * from invoice where id in (631502,576923);
		select * from ar where id = 187051;
		
		delete from inventory WHERE trans_id = 187049;
		delete from invoice WHERE trans_id = 187049;
		delete from acc_trans WHERE trans_id = 187049;

	* Renumerar facturas por el campo orden de compra:
		update ar set invnumber=ponumber where invnumber='63';

	* Multitenancy:
		hibernate 3 multi tenancy
		http://spring.io/blog/2007/01/23/dynamic-datasource-routing/
